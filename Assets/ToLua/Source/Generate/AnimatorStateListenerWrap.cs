//this source code was auto-generated by tolua#, do not modify it
using System;
using Game;
using LuaInterface;

public class AnimatorStateListenerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(AnimatorStateListener), typeof(UnityEngine.StateMachineBehaviour));
		L.RegFunction("OnStateEnter", OnStateEnter);
		L.RegFunction("OnStateExit", OnStateExit);
		L.RegFunction("New", _CreateAnimatorStateListener);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("onStateEnter", get_onStateEnter, set_onStateEnter);
		L.RegVar("onStateExit", get_onStateExit, set_onStateExit);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateAnimatorStateListener(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				AnimatorStateListener obj = new AnimatorStateListener();
				ToLua.Push(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: AnimatorStateListener.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnStateEnter(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 4)
			{
				AnimatorStateListener obj = (AnimatorStateListener)ToLua.CheckObject<AnimatorStateListener>(L, 1);
				UnityEngine.Animator arg0 = (UnityEngine.Animator)ToLua.CheckObject<UnityEngine.Animator>(L, 2);
				UnityEngine.AnimatorStateInfo arg1 = StackTraits<UnityEngine.AnimatorStateInfo>.Check(L, 3);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
				obj.OnStateEnter(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 5)
			{
				AnimatorStateListener obj = (AnimatorStateListener)ToLua.CheckObject<AnimatorStateListener>(L, 1);
				UnityEngine.Animator arg0 = (UnityEngine.Animator)ToLua.CheckObject<UnityEngine.Animator>(L, 2);
				UnityEngine.AnimatorStateInfo arg1 = StackTraits<UnityEngine.AnimatorStateInfo>.Check(L, 3);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
				UnityEngine.Animations.AnimatorControllerPlayable arg3 = StackTraits<UnityEngine.Animations.AnimatorControllerPlayable>.Check(L, 5);
				obj.OnStateEnter(arg0, arg1, arg2, arg3);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: AnimatorStateListener.OnStateEnter");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnStateExit(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 4)
			{
				AnimatorStateListener obj = (AnimatorStateListener)ToLua.CheckObject<AnimatorStateListener>(L, 1);
				UnityEngine.Animator arg0 = (UnityEngine.Animator)ToLua.CheckObject<UnityEngine.Animator>(L, 2);
				UnityEngine.AnimatorStateInfo arg1 = StackTraits<UnityEngine.AnimatorStateInfo>.Check(L, 3);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
				obj.OnStateExit(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 5)
			{
				AnimatorStateListener obj = (AnimatorStateListener)ToLua.CheckObject<AnimatorStateListener>(L, 1);
				UnityEngine.Animator arg0 = (UnityEngine.Animator)ToLua.CheckObject<UnityEngine.Animator>(L, 2);
				UnityEngine.AnimatorStateInfo arg1 = StackTraits<UnityEngine.AnimatorStateInfo>.Check(L, 3);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
				UnityEngine.Animations.AnimatorControllerPlayable arg3 = StackTraits<UnityEngine.Animations.AnimatorControllerPlayable>.Check(L, 5);
				obj.OnStateExit(arg0, arg1, arg2, arg3);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: AnimatorStateListener.OnStateExit");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_onStateEnter(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AnimatorStateListener obj = (AnimatorStateListener)o;
			System.Action<int> ret = obj.onStateEnter;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index onStateEnter on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_onStateExit(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AnimatorStateListener obj = (AnimatorStateListener)o;
			System.Action<int> ret = obj.onStateExit;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index onStateExit on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_onStateEnter(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AnimatorStateListener obj = (AnimatorStateListener)o;
			System.Action<int> arg0 = (System.Action<int>)ToLua.CheckDelegate<System.Action<int>>(L, 2);
			obj.onStateEnter = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index onStateEnter on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_onStateExit(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AnimatorStateListener obj = (AnimatorStateListener)o;
			System.Action<int> arg0 = (System.Action<int>)ToLua.CheckDelegate<System.Action<int>>(L, 2);
			obj.onStateExit = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index onStateExit on a nil value");
		}
	}
}

