//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Game_ClickManagerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Game.ClickManager), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("AddClickGroundListener", AddClickGroundListener);
		L.RegFunction("RemoveClickGroundListener", RemoveClickGroundListener);
		L.RegFunction("SetReserveRect", SetReserveRect);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("Instance", get_Instance, null);
		L.RegFunction("ClickGroundDelegate", Game_ClickManager_ClickGroundDelegate);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddClickGroundListener(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Game.ClickManager obj = (Game.ClickManager)ToLua.CheckObject(L, 1, typeof(Game.ClickManager));
			Game.ClickManager.ClickGroundDelegate arg0 = (Game.ClickManager.ClickGroundDelegate)ToLua.CheckDelegate<Game.ClickManager.ClickGroundDelegate>(L, 2);
			Game.ClickManager.ClickGroundDelegate o = obj.AddClickGroundListener(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveClickGroundListener(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Game.ClickManager obj = (Game.ClickManager)ToLua.CheckObject(L, 1, typeof(Game.ClickManager));
			Game.ClickManager.ClickGroundDelegate arg0 = (Game.ClickManager.ClickGroundDelegate)ToLua.CheckDelegate<Game.ClickManager.ClickGroundDelegate>(L, 2);
			obj.RemoveClickGroundListener(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetReserveRect(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Game.ClickManager obj = (Game.ClickManager)ToLua.CheckObject(L, 1, typeof(Game.ClickManager));
			UnityEngine.RectTransform arg0 = (UnityEngine.RectTransform)ToLua.CheckObject(L, 2, typeof(UnityEngine.RectTransform));
			obj.SetReserveRect(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Instance(IntPtr L)
	{
		try
		{
			ToLua.PushSealed(L, Game.ClickManager.Instance);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Game_ClickManager_ClickGroundDelegate(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<Game.ClickManager.ClickGroundDelegate>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<Game.ClickManager.ClickGroundDelegate>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

